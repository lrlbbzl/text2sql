SELECT T1.born_state FROM department AS T1 JOIN management AS T2 ON T1.Department_ID  =  T2.department_ID JOIN head AS T3 ON T3.head_ID  =  T2.head_ID WHERE T1.name  =  "Treasury" INTERSECT SELECT T1.born_state FROM department AS T1 JOIN management AS T2 ON T1.Department_ID  =  T2.department_ID JOIN head AS T3 ON T3.head_ID  =  T2.head_ID WHERE T1.name  =  "Homeland Security"
SELECT status FROM city WHERE population  >  1500 INTERSECT SELECT status FROM city WHERE population  <  500
SELECT status FROM city WHERE population > 1500 INTERSECT SELECT status FROM city WHERE population < 500
SELECT student_id FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id UNION SELECT student_id FROM students JOIN student_course_attendance ON students.student_id = student_course_attendance.student_id
SELECT student_id FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id UNION SELECT student_id FROM students JOIN student_course_attendance ON students.student_id = student_course_attendance.student_id
SELECT course_id FROM student_course_registrations WHERE student_id  =  121 UNION SELECT course_id FROM student_course_attendance WHERE student_id  =  121
SELECT course_id FROM Student_Course_Registrations WHERE student_id  =  121 UNION SELECT course_id FROM Student_Course_Attendance WHERE student_id  =  121
SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T1.city  =  "San Francisco" INTERSECT SELECT T2.station_id FROM status AS T2 GROUP BY T2.station_id HAVING avg(bikes_available)  >  10
SELECT T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T1.city  =  "San Francisco" INTERSECT SELECT T1.station_id FROM status AS T1 WHERE T1.bikes_available  >  10
SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE EXTRACT(MONTH FROM installation_date) = 12
SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE MONTH(installation_date)  =  12
SELECT T1.id FROM station AS T1 WHERE T1.lat  >  37.4 INTERSECT SELECT T1.station_id FROM status AS T1 WHERE NOT EXISTS (SELECT * FROM status AS T2 WHERE T1.station_id  =  T2.station_id AND T2.bikes_available  <  7)
SELECT T1.id FROM station AS T1 WHERE T1.lat  >  37.4 INTERSECT SELECT T1.station_id FROM status AS T1 WHERE T1.bikes_available  >=  7
SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 INTERSECT SELECT name FROM station WHERE city  !=  "San Jose"
SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  10 INTERSECT SELECT name FROM station WHERE city  !=  "San Jose"
SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  =  70 EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  <  70
SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f < 70
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT start_station_id FROM trip GROUP BY start_station_id HAVING count(*)  >=  100
SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT start_station_id FROM trip GROUP BY start_station_id HAVING count(*)  >=  100
SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id HAVING count(*)  >  100
SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip
SELECT T1.Publisher FROM publication AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Price  >  10000000 INTERSECT SELECT T1.Publisher FROM publication AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Price  <  5000000
SELECT T1.Nominee FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Award  =  "Tony Award" INTERSECT SELECT T1.Nominee FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Award  =  "Drama Desk Award"
SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Award  =  "Tony Award" INTERSECT SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Award  =  "Drama Desk Award"
SELECT T2.uid FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  "Mary" INTERSECT SELECT T2.uid FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  "Susan"
SELECT eid FROM employee EXCEPT SELECT eid FROM certificate
SELECT eid FROM employee EXCEPT SELECT eid FROM certificate
SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Airbus A340-300"
SELECT T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Boeing 737-800" INTERSECT SELECT T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid JOIN aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = "Airbus A340-300"
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid  =  T2.eid JOIN aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"
SELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN certificate AS T2 ON T1.eid  =  T2.eid JOIN aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"
SELECT StuID FROM Student EXCEPT SELECT t1.StuID FROM Student AS t1 JOIN Has_Allergy AS t2 ON t1.StuID  =  t2.StuID JOIN Allergy_Type AS t3 ON t2.Allergy  =  t3.Allergy
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_AllergyOverall, the SQL queries for the given examples are as follows:Example 1:SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Airbus A340-300"Example 2:SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose"Example 3:SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'Example 4:SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T
SELECT T1.LName, T1.Age FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.AllergyType = 'milk' INTERSECT SELECT T1.LName, T1.Age FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy = T3.Allergy WHERE T3.AllergyType = 'cat'
SELECT T1.LName ,  T1.Age FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "milk" INTERSECT SELECT T1.LName ,  T1.Age FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "cat"
SELECT T1.Fname ,  T1.Sex FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "milk" INTERSECT SELECT T1.Fname ,  T1.Sex FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "cat"
SELECT T1.Fname ,  T1.Sex FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "milk" INTERSECT SELECT Fname ,  Sex FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "cats")
SELECT AVG(T1.Age) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "food" INTERSECT SELECT AVG(T1.Age) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "animal"
SELECT avg(T1.Age) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "food" UNION SELECT avg(T1.Age) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID  =  T2.StuID JOIN Allergy_Type AS T3 ON T2.Allergy  =  T3.Allergy WHERE T3.AllergyType  =  "animal"
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Movies" EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Music"
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Movies" EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Music"
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Movies" INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Music"
SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Movies" INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  "Music"
SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.Journal_ID = T2.Journal_ID WHERE T2.Editor_ID IN (editor_id_list)
SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT t1.customer_id, t1.customer_first_name FROM Customers AS t1 JOIN Customers_Cards AS t2 ON t1.customer_id = t2.customer_id
SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT t1.customer_id, t1.customer_first_name FROM Customers AS t1 JOIN Customers_Cards AS t2 ON t1.customer_id = t2.customer_id
SELECT Name FROM track EXCEPT SELECT T1.Name FROM track AS T1 JOIN race AS T2 ON T1.Track_ID  =  T2.Track_ID WHERE T2.Class  =  'GT'
SELECT Name FROM track EXCEPT SELECT T2.Name FROM race AS T1 JOIN track AS T2 ON T1.Track_ID  =  T2.Track_ID WHERE T1.Class  =  'GT'
SELECT T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID  =  T2.Track_ID WHERE T2.Seating  >  90000 INTERSECT SELECT T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID  =  T2.Track_ID WHERE T2.Seating  <  70000
SELECT T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID  =  T2.Track_ID WHERE T2.Seating  >  90000 INTERSECT SELECT T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID  =  T2.Track_ID WHERE T2.Seating  <  70000
SELECT T1.Address FROM member AS T1 WHERE T1.Age  <  30 INTERSECT SELECT T1.Address FROM member AS T1 WHERE T1.Age  >  40
SELECT membership_card FROM member WHERE Address  =  "Hartford" INTERSECT SELECT membership_card FROM member WHERE Address  =  "Waterbury"
SELECT address FROM shop EXCEPT SELECT t1.address FROM shop AS t1 JOIN member AS t2 ON t1.shop_id  =  t2.shop_id WHERE t2.membership_card  =  'black'
SELECT LastName FROM Customer EXCEPT SELECT T1.LastName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.Total  >  20
SELECT LastName FROM Customer EXCEPT SELECT T1.LastName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.Total  >  20
SELECT Name FROM Artist EXCEPT SELECT T1.Name FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId  =  T2.ArtistId
SELECT Name FROM Artist EXCEPT SELECT T1.Name FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId  =  T2.ArtistId
SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreId  =  T3.GenreId WHERE T3.Name  =  "Reggae" INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreId  =  T3.GenreId WHERE T3.Name  =  "Rock"
SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreId  =  T3.GenreId WHERE T3.Name  =  "Reggae" INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreId  =  T3.GenreId WHERE T3.Name  =  "Rock"
SELECT Customer_name FROM Customers EXCEPT SELECT t1.Customer_name FROM Customers AS t1 JOIN First_Notification_of_Loss AS t2 ON t1.Customer_ID  =  t2.Customer_ID WHERE t2.FNOL_ID IS NOT NULL
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN first_notification_of_loss AS t3 ON t2.customer_id  =  t3.customer_id WHERE t3.customer_id IS NOT NULL
SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN First_Notification_of_Loss AS T3 ON T2.Customer_ID  =  T3.Customer_ID AND T2.Policy_ID  =  T3.Policy_ID JOIN Services AS T4 ON T3.Service_ID  =  T4.Service_ID WHERE T4.Service_name  =  "Close a policy" INTERSECT SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN First_Notification_of_Loss AS T3 ON T2.Customer_ID  =  T3.Customer_ID AND T2.Policy_ID  =  T3.Policy_ID JOIN Services AS T4 ON T3.Service_ID  =  T4.Service_ID WHERE T4.Service_name  =  "New policy application"
SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN First_Notification_of_Loss AS T3 ON T2.Customer_ID  =  T3.Customer_ID AND T2.Policy_ID  =  T3.Policy_ID JOIN Services AS T4 ON T3.Service_ID  =  T4.Service_ID WHERE T4.Service_name  =  "Close a policy" INTERSECT SELECT T1.Customer_name FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN First_Notification_of_Loss AS T3 ON T2.Customer_ID  =  T3.Customer_ID AND T2.Policy_ID  =  T3.Policy_ID JOIN Services AS T4 ON T3.Service_ID  =  T4.Service_ID WHERE T4.Service_name  =  "Upgrade a policy"
SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T2.interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T2.interaction_type = 'activator'
SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.medicine_id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T2.interaction_type  =  "inhibitor" UNION SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.medicine_id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T2.interaction_type  =  "activator"
SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.medicine_id JOIN enzyme AS T3 ON T2.enzyme_id = T3.id WHERE T3.product = 'Heme'
SELECT name, trade_name FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.product  =  'Heme' EXCEPT SELECT name, trade_name FROM medicine
SELECT Model_name FROM chip_model EXCEPT SELECT T1.Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model WHERE T2.Accreditation_type  =  "full"
SELECT T2.Pixels FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode  =  T2.Graphics_mode WHERE T1.Accreditation_type  =  "full" INTERSECT SELECT T2.Pixels FROM phone AS T1 JOIN screen_mode AS T2 ON T1.screen_mode  =  T2.Graphics_mode WHERE T1.Accreditation_type  =  "Provisional"
SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "defender"
SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Forward" UNION SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"
SELECT T1.College FROM match_season AS T1 JOIN player AS T2 ON T1.Player  =  T2.Player WHERE T1.Position  =  "midfielder" INTERSECT SELECT T1.College FROM match_season AS T1 JOIN player AS T2 ON T1.Player  =  T2.Player WHERE T1.Position  =  "defender"
SELECT T1.College FROM match_season AS T1 WHERE T1.Position  =  "Midfielder" UNION SELECT T1.College FROM match_season AS T1 WHERE T1.Position  =  "Defender"
SELECT DISTINCT T1.Country FROM mountain AS T1 WHERE T1.Height  >  5600 INTERSECT SELECT DISTINCT T1.Country FROM mountain AS T1 WHERE T1.Height  <  5200
SELECT T1.Country FROM mountain AS T1 WHERE T1.Height  >  5600 INTERSECT SELECT T1.Country FROM mountain AS T1 WHERE T1.Height  <  5200
SELECT name, birth_place FROM people EXCEPT SELECT t1.name, t1.birth_place FROM people AS t1 JOIN body_builder AS t2 ON t1.people_id = t2.people_id
SELECT T1.Party FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T1.State  =  "New York" INTERSECT SELECT T1.Party FROM representative AS T1 JOIN election AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T1.State  =  "Pennsylvania"
SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.booking_status_code  =  "Provisional" INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.booking_status_code  =  "Confirmed"
SELECT apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.booking_status_code  =  "Provisional" INTERSECT SELECT apt_number FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.booking_status_code  =  "Confirmed"
SELECT apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1
SELECT apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1
SELECT T3.name FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id JOIN stadium AS T3 ON T1.stadium_id  =  T3.id WHERE T2.Player  =  'Walter Samuel' INTERSECT SELECT T3.name FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id JOIN stadium AS T3 ON T1.stadium_id  =  T3.id WHERE T2.Player  =  'Thiago Motta'
SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T1.name, T1.average_attendance, T1.total_attendance FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id
SELECT T1.id FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id WHERE T1.height  >=  180 AND T2.overall_rating  >  85
SELECT id FROM Player_Attributes WHERE preferred_foot  =  'left' AND height BETWEEN 180 AND 190
SELECT T1.Location FROM performance AS T1 JOIN member_attendance AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE T1.Attendance  >  2000 INTERSECT SELECT T1.Location FROM performance AS T1 JOIN member_attendance AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE T1.Attendance  <  1000
SELECT T1.title FROM course AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name WHERE T2.dept_name  =  "Statistics" INTERSECT SELECT T1.title FROM course AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name WHERE T2.dept_name  =  "Psychology"
SELECT T1.title FROM course AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name WHERE T2.dept_name  =  "Statistics" INTERSECT SELECT T1.title FROM course AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name WHERE T2.dept_name  =  "Psychology"
SELECT T1.title FROM course AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name WHERE T2.dept_name  =  "Statistics" EXCEPT SELECT T1.title FROM course AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name WHERE T2.dept_name  =  "Psychology"
SELECT title FROM course WHERE dept_name  =  "Statistics" EXCEPT SELECT title FROM course WHERE dept_name  =  "Psychology"
SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID JOIN section AS T3 ON T2.course_id  =  T3.course_id AND T2.sec_id  =  T3.sec_id AND T2.semester  =  T3.semester AND T2.year  =  T3.year WHERE T3.semester  =  "Fall" AND T3.year  =  2009 EXCEPT SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID JOIN section AS T3 ON T2.course_id  =  T3.course_id AND T2.sec_id  =  T3.sec_id AND T2.semester  =  T3.semester AND T2.year  =  T3.year WHERE T3.semester  =  "Spring" AND T3.year  =  2010
SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID JOIN section AS T3 ON T2.course_id  =  T3.course_id AND T2.sec_id  =  T3.sec_id AND T2.semester  =  T3.semester AND T2.year  =  T3.year WHERE T3.semester  =  "Fall" AND T3.year  =  2009 EXCEPT SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID JOIN section AS T3 ON T2.course_id  =  T3.course_id AND T2.sec_id  =  T3.sec_id AND T2.semester  =  T3.semester AND T2.year  =  T3.year WHERE T3.semester  =  "Spring" AND T3.year  =  2010
SELECT course_id FROM course EXCEPT SELECT t1.course_id FROM course AS t1 JOIN prereq AS t2 ON t1.course_id  =  t2.course_id WHERE t2.prereq_id IS NOT NULL
SELECT course_id FROM course EXCEPT SELECT t1.course_id FROM course AS t1 JOIN prereq AS t2 ON t1.course_id  =  t2.course_id
SELECT ID FROM instructor EXCEPT SELECT ID FROM teaches
SELECT ID FROM instructor EXCEPT SELECT t1.ID FROM instructor AS t1 JOIN teaches AS t2 ON t1.ID  =  t2.ID
SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id  =  T2.course_id WHERE T2.semester  =  "Fall" AND T2.year  =  2009 UNION SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id  =  T2.course_id WHERE T2.semester  =  "Spring" AND T2.year  =  2010
SELECT course_id FROM section WHERE semester  =  "Fall" AND year  =  2009 UNION SELECT course_id FROM section WHERE semester  =  "Spring" AND year  =  2010
SELECT T1.course_id, T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester = 'Fall' AND T2.year = 2009 INTERSECT SELECT T1.course_id, T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester = 'Spring' AND T2.year = 2010
SELECT T1.course_id FROM course AS T1 JOIN section AS T2 ON T1.course_id  =  T2.course_id WHERE T2.semester  =  "Fall" AND T2.year  =  2009 INTERSECT SELECT T1.course_id FROM course AS T1 JOIN section AS T2 ON T1.course_id  =  T2.course_id WHERE T2.semester  =  "Spring" AND T2.year  =  2010
SELECT T1.course_id ,  T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id  =  T2.course_id WHERE T2.semester  =  "Fall" AND T2.year  =  2009 EXCEPT SELECT T1.course_id ,  T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id  =  T2.course_id WHERE T2.semester  =  "Spring" AND T2.year  =  2010
SELECT course_id FROM section WHERE semester  =  "Fall" AND year  =  2009 EXCEPT SELECT course_id FROM section WHERE semester  =  "Spring" AND year  =  2010
SELECT Customer_Details FROM Customers EXCEPT SELECT t1.Customer_Details FROM Customers AS t1 JOIN Policies AS t2 ON t1.Customer_ID  =  t2.Customer_ID
SELECT Customer_Details FROM Customers EXCEPT SELECT t1.Customer_Details FROM Customers AS t1 JOIN Policies AS t2 ON t1.Customer_ID  =  t2.Customer_ID
SELECT Customer_Details FROM Customers UNION SELECT Staff_Details FROM Staff
SELECT Customer_Details AS name FROM Customers UNION SELECT Staff_Details AS name FROM Staff
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM accounts
SELECT customer_id FROM customers EXCEPT SELECT customer_id FROM accounts
SELECT product_name FROM products EXCEPT SELECT t1.product_name FROM products AS t1 JOIN order_items AS t2 ON t1.product_id  =  t2.product_id JOIN orders AS t3 ON t2.order_id  =  t3.order_id
SELECT product_name FROM products EXCEPT SELECT t1.product_name FROM products AS t1 JOIN order_items AS t2 ON t1.product_id  =  t2.product_id
SELECT DISTINCT Country FROM people WHERE Age > 30 INTERSECT SELECT DISTINCT Country FROM people WHERE Age < 25
SELECT Name FROM church EXCEPT SELECT T1.Name FROM church AS T1 JOIN wedding AS T2 ON T1.Church_ID  =  T2.Church_ID WHERE T2.Year  =  2015
SELECT name FROM artist EXCEPT SELECT T1.name FROM artist AS T1 JOIN exhibition AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Year  =  2004
SELECT Name FROM artist EXCEPT SELECT T1.Name FROM artist AS T1 JOIN exhibition AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Year  =  2004
SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID  =  T2.Exhibition_ID WHERE T2.Attendance  <  100 INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID  =  T2.Exhibition_ID WHERE T2.Attendance  >  500
SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID  =  T2.Exhibition_ID WHERE T2.Attendance  <  100 INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID  =  T2.Exhibition_ID WHERE T2.Attendance  >  500
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5
SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(rating)  >  5
SELECT residence FROM player WHERE gender  =  "M" INTERSECT SELECT residence FROM player WHERE gender  =  "F"
SELECT DISTINCT hometown FROM people EXCEPT SELECT t1.hometown FROM people AS t1 JOIN gymnast AS t2 ON t1.people_id  =  t2.gymnast_id
SELECT Hometown FROM people EXCEPT SELECT Hometown FROM people JOIN gymnast ON people.People_ID  =  gymnast.Gymnast_ID
SELECT T1.Hometown FROM people AS T1 WHERE T1.Age  >  23 INTERSECT SELECT T1.Hometown FROM people AS T1 WHERE T1.Age  <  20
SELECT hometown FROM people WHERE age > 23 INTERSECT SELECT hometown FROM people WHERE age < 20
SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT AVG(balance) FROM CHECKING) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT AVG(balance) FROM SAVINGS)
SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT AVG(balance) FROM CHECKING) INTERSECT SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT AVG(balance) FROM SAVINGS)
SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T3.id  =  T2.accelerator_id WHERE T3.name  =  "CACHEbox" INTERSECT SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T3.id  =  T2.accelerator_id WHERE T3.name  =  "Fasterfox"
SELECT T1.name ,  T1.Operating_system FROM web_client_accelerator AS T1 EXCEPT SELECT T1.name ,  T1.Operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.accelerator_id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'
SELECT T1.Team FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Name  =  "Orton" INTERSECT SELECT T1.Team FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Name  =  "Benjamin"
SELECT T1.Team FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Name  =  "Orton" INTERSECT SELECT T1.Team FROM Elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Name  =  "Benjamin"
SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  "Glenn" INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  "Triton"
SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9
SELECT Name FROM building EXCEPT SELECT T1.Name FROM building AS T1 JOIN Institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.Founded  =  2003
SELECT Location FROM cinema WHERE Capacity  >  800 EXCEPT SELECT Location FROM cinema
SELECT location FROM cinema WHERE Openning_year  =  2010 INTERSECT SELECT location FROM cinema WHERE Openning_year  =  2011
SELECT T2.coupon_amount FROM Customers AS T1 JOIN Discount_Coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T1.good_or_bad_customer  =  'good' INTERSECT SELECT T2.coupon_amount FROM Customers AS T1 JOIN Discount_Coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T1.good_or_bad_customer  =  'bad'
SELECT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID  =  T2.Phone_ID JOIN market AS T3 ON T2.Market_ID  =  T3.Market_ID WHERE T1.Memory_in_G  <  32 INTERSECT SELECT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID  =  T2.Phone_ID JOIN market AS T3 ON T2.Market_ID  =  T3.Market_ID WHERE T1.Memory_in_G  >  64
SELECT Headquarters FROM company WHERE Main_Industry  =  "banking" INTERSECT SELECT Headquarters FROM company WHERE Main_Industry  =  "Oil and gas"
SELECT T1.Headquarters FROM company AS T1 WHERE T1.Main_Industry  =  "banking" INTERSECT SELECT T1.Headquarters FROM company AS T1 WHERE T1.Main_Industry  =  "oil and gas"
SELECT Headquarters FROM company EXCEPT SELECT Headquarters FROM company WHERE Main_Industry  =  "banking"
SELECT Headquarters FROM company EXCEPT SELECT T1.Headquarters FROM company AS T1 JOIN station_company AS T2 ON T1.Company_ID  =  T2.Company_ID WHERE T1.Main_Industry  =  'banking'
SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID  =  T2.Party_ID WHERE T2.Party_ID  =  3 INTERSECT SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID  =  T2.Party_ID WHERE T2.Party_ID  =  1
SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID  =  T2.Party_ID WHERE T2.Party_ID  =  3 INTERSECT SELECT T1.Member_Name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID  =  T2.Party_ID WHERE T2.Party_ID  =  1
SELECT Member_Name FROM member EXCEPT SELECT t1.Member_Name FROM member AS t1 JOIN party_events AS t2 ON t1.Member_ID  =  t2.Member_in_charge_ID
SELECT Member_Name FROM member EXCEPT SELECT t1.Member_Name FROM member AS t1 JOIN party_events AS t2 ON t1.Member_ID  =  t2.Member_in_charge_ID
SELECT Position FROM pilot WHERE Join_Year > 2005 INTERSECT SELECT Position FROM pilot WHERE Join_Year < 2000
SELECT T1.document_id FROM Documents AS T1 JOIN Ref_Document_Status AS T2 ON T1.document_status_code  =  T2.document_status_code WHERE T2.document_status_description  =  "done" INTERSECT SELECT T1.document_id FROM Documents AS T1 JOIN Ref_Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T2.document_type_description  =  "Paper"
SELECT document_id FROM Documents WHERE document_status_code  =  "done" INTERSECT SELECT document_id FROM Documents WHERE document_type_code  =  "Paper" INTERSECT SELECT document_id FROM Documents WHERE shipping_agent_code  =  "USPS"
SELECT employee_name FROM employees EXCEPT SELECT t1.employee_name FROM employees AS t1 JOIN circulation_history AS t2 ON t1.employee_id  =  t2.employee_id
SELECT T1.Event_ID FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN Participants AS T3 ON T2.Participant_ID  =  T3.Participant_ID WHERE T3.Participant_Details  =  'Kenyatta Kuhn' EXCEPT SELECT Event_ID FROM Events
SELECT T1.Service_Type_Code FROM Services AS T1 JOIN Events AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Event_Details  =  "successful" INTERSECT SELECT T1.Service_Type_Code FROM Services AS T1 JOIN Events AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Event_Details  =  "failure"
SELECT T1.driverId, T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = "Australian Grand Prix" INTERSECT SELECT T1.driverId, T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = "Chinese Grand Prix"
SELECT T1.driverId, T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = "Australian Grand Prix" INTERSECT SELECT T1.driverId, T1.forename FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = "Chinese Grand Prix"
SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid  =  T3.raceid WHERE T3.name  =  "Australian Grand Prix" EXCEPT SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid  =  T3.raceid WHERE T3.name  =  "Chinese Grand Prix"
SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = "Australian Grand Prix" EXCEPT SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = "Chinese Grand Prix"
SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
SELECT T1.forename, T1.surname, T1.driverId FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverId FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId HAVING COUNT(*) > 5
SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
SELECT T1.Starting_Year FROM technician AS T1 WHERE T1.Team  =  "CLE" INTERSECT SELECT T1.Starting_Year FROM technician AS T1 WHERE T1.Team  =  "CWS"
SELECT starting_year FROM technician WHERE team  =  "CLE" UNION SELECT starting_year FROM technician WHERE team  =  "CWS"
SELECT T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Money_Requested  >  140000 INTERSECT SELECT T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Money_Requested  <  120000
SELECT T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Money_Requested  >  140000 INTERSECT SELECT T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Money_Requested  <  120000
SELECT T1.Country FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Injured  >  50 INTERSECT SELECT T1.Country FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Injured  <  20
SELECT Campus FROM Campuses WHERE Location  =  "Northridge, Los Angeles" UNION SELECT Campus FROM Campuses WHERE Location  =  "San Francisco, San Francisco"
SELECT Campus FROM Campuses WHERE Location  =  "Northridge, Los Angeles" UNION SELECT Campus FROM Campuses WHERE Location  =  "San Francisco, San Francisco"
SELECT Reviewer.name, Movie.title FROM Reviewer JOIN Rating ON Reviewer.rID = Rating.rID JOIN Movie ON Rating.mID = Movie.mID
SELECT name FROM Reviewer UNION SELECT title FROM Movie
SELECT title FROM Movie EXCEPT SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T2.rID  =  T3.rID WHERE T3.name  =  "Chris Jackson"
SELECT title FROM Movie EXCEPT SELECT T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T2.rID  =  T3.rID WHERE T3.name  =  "Chris Jackson"
SELECT mID FROM Movie EXCEPT SELECT T1.mID FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T2.rID  =  T3.rID WHERE T3.name  =  "Brittany Harris"
SELECT mID FROM Movie EXCEPT SELECT T1.mID FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T2.rID  =  T3.rID WHERE T3.name  =  "Britanny Harris"
SELECT rID FROM Reviewer WHERE rID NOT IN (SELECT rID FROM Rating WHERE stars = 4)
SELECT rID FROM Reviewer EXCEPT SELECT rID FROM Rating WHERE stars  =  4
SELECT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE T2.stars  =  3 INTERSECT SELECT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE T2.stars  =  4
SELECT DISTINCT T1.name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE T2.stars  =  3 OR T2.stars  =  4
SELECT title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  3 INTERSECT SELECT title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  4
SELECT title FROM Movie WHERE mID IN (SELECT mID FROM Rating WHERE stars = 3 OR stars = 4)
SELECT T1.Police_force FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID  =  T2.County_ID WHERE T2.Location  =  "east" INTERSECT SELECT T1.Police_force FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID  =  T2.County_ID WHERE T2.Location  =  "west"
SELECT T1.Police_force FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID  =  T2.County_ID WHERE T2.Location  =  "East" INTERSECT SELECT T1.Police_force FROM county_public_safety AS T1 JOIN city AS T2 ON T1.County_ID  =  T2.County_ID WHERE T2.Location  =  "West"
SELECT cmi_cross_ref_id FROM CMI_Cross_References EXCEPT SELECT cmi_cross_ref_id FROM Parking_Fines
SELECT T1.Nationality FROM host AS T1 JOIN party_host AS T2 ON T1.Host_ID  =  T2.Host_ID WHERE T1.Age  >  45 INTERSECT SELECT T1.Nationality FROM host AS T1 JOIN party_host AS T2 ON T1.Host_ID  =  T2.Host_ID WHERE T1.Age  <  35
SELECT T1.Nationality FROM host AS T1 WHERE T1.Age  >  45 INTERSECT SELECT T1.Nationality FROM host AS T1 WHERE T1.Age  <  35
SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID JOIN region AS T3 ON T2.Region_id  =  T3.Region_id GROUP BY T1.Storm_ID HAVING count(*)  >=  2 INTERSECT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID GROUP BY T1.Storm_ID HAVING sum(T2.Number_city_affected)  >=  10
SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID JOIN region AS T3 ON T2.Region_id  =  T3.Region_id GROUP BY T1.Storm_ID HAVING count(*)  >=  2 INTERSECT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID GROUP BY T1.Storm_ID HAVING sum(T2.Number_city_affected)  >=  10
SELECT Name FROM storm EXCEPT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID GROUP BY T1.Storm_ID HAVING count(*)  >=  2
SELECT Name FROM storm EXCEPT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID GROUP BY T1.Storm_ID HAVING count(*)  >=  2
SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID JOIN region AS T3 ON T2.Region_id  =  T3.Region_id WHERE T3.Region_name  =  "Afghanistan" INTERSECT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID JOIN region AS T3 ON T2.Region_id  =  T3.Region_id WHERE T3.Region_name  =  "Albania"
SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID JOIN region AS T3 ON T2.Region_id  =  T3.Region_id WHERE T3.Region_name  =  "Afghanistan" INTERSECT SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID  =  T2.Storm_ID JOIN region AS T3 ON T2.Region_id  =  T3.Region_id WHERE T3.Region_name  =  "Albania"
SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID  =  T2.Party JOIN committee AS T3 ON T2.Committee  =  T3.Committee WHERE T3.Committee  =  "Appropriations" INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID  =  T2.Party JOIN committee AS T3 ON T2.Committee  =  T3.Committee WHERE T3.Committee  =  "Budget"
SELECT T1.party FROM election AS T1 JOIN committee AS T2 ON T1.Committee  =  T2.Committee WHERE T2.Committee  =  "Appropriations" INTERSECT SELECT T1.party FROM election AS T1 JOIN committee AS T2 ON T1.Committee  =  T2.Committee WHERE T2.Committee  =  "Economic Matters"
SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Liberal"
SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Democratic" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  "Liberal"
SELECT T1.Nationality FROM journalist AS T1 WHERE T1.Years_working  >  10 INTERSECT SELECT T1.Nationality FROM journalist AS T1 WHERE T1.Years_working  <  3
SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'
SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id WHERE T1.rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN rental AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3
SELECT T1.title ,  T1.film_id FROM film AS T1 WHERE T1.rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3
SELECT payment_date FROM payment WHERE amount  >  10 INTERSECT SELECT payment_date FROM payment JOIN staff ON payment.staff_id  =  staff.staff_id WHERE staff.first_name  =  'Elsa'
SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT payment_date FROM payment JOIN staff ON payment.staff_id  =  staff.staff_id WHERE staff.first_name  =  'Elsa'
SELECT title FROM film WHERE length  >  100 UNION SELECT title FROM film WHERE rating  =  "PG" EXCEPT SELECT title FROM film WHERE replacement_cost  >  200
SELECT title FROM film WHERE length  >  100 UNION SELECT title FROM film WHERE rating  =  "PG" EXCEPT SELECT title FROM film WHERE replacement_cost  >  200
SELECT cust_name FROM customer WHERE acc_type  =  "saving" INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  "checking"
SELECT T1.cust_name FROM customer AS T1 JOIN bank AS T2 ON T1.branch_ID  =  T2.branch_ID WHERE T1.acc_type  =  "savings" INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN bank AS T2 ON T1.branch_ID  =  T2.branch_ID WHERE T1.acc_type  =  "checking"
SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  "saving"
SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer AS t1 JOIN bank AS t2 ON t1.branch_ID  =  t2.branch_ID WHERE t1.acc_type  =  'saving'
SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_ID  =  t2.cust_ID WHERE t2.loan_type  =  'Mortgages'
SELECT cust_name FROM customer EXCEPT SELECT t1.cust_name FROM customer AS t1 JOIN loan AS t2 ON t1.cust_ID  =  t2.cust_ID WHERE t2.loan_type  =  "Mortgage"
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_ID  =  T2.cust_ID WHERE T2.loan_type  =  "Mortgages" INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_ID  =  T2.cust_ID WHERE T2.loan_type  =  "Auto"
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_ID  =  T2.cust_ID WHERE T2.loan_type  =  "Mortgage" INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_ID  =  T2.cust_ID WHERE T2.loan_type  =  "Auto"
SELECT last_name FROM teachers EXCEPT SELECT t1.last_name FROM teachers AS t1 JOIN detention AS t2 ON t1.teacher_id  =  t2.teacher_id
SELECT T3.line_1 FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Addresses AS T3 ON T2.address_id  =  T3.address_id INTERSECT SELECT T2.line_1 FROM Teachers AS T1 JOIN Addresses AS T2 ON T1.address_id  =  T2.address_id
SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 LEFT JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) < 2
SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2
SELECT T1.staff_name ,  T1.staff_id FROM staff AS T1 JOIN fault_log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T1.staff_name ,  T1.staff_id FROM staff AS T1 JOIN engineer_visits AS T2 ON T1.staff_id  =  T2.contact_staff_id
SELECT PROF_FNAME FROM PROFESSOR EXCEPT SELECT T1.PROF_FNAME FROM PROFESSOR AS T1 JOIN CLASS AS T2 ON T1.PROF_NUM  =  T2.PROF_NUM
SELECT EMP_FNAME FROM EMPLOYEE WHERE EMP_NUM IN (SELECT PROF_NUM FROM PROFESSOR) EXCEPT SELECT EMP_FNAME FROM EMPLOYEE WHERE EMP_NUM IN (SELECT PROF_NUM FROM CLASS)
SELECT T1.EMP_FNAME FROM PROFESSOR AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE  =  T2.DEPT_CODE JOIN EMPLOYEE AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE T2.DEPT_NAME  =  "history" EXCEPT SELECT T1.EMP_FNAME FROM PROFESSOR AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM
SELECT T2.EMP_FNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T1.DEPT_CODE  =  T3.DEPT_CODE WHERE T3.DEPT_NAME  =  "history" EXCEPT SELECT T2.EMP_FNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM JOIN DEPARTMENT AS T3 ON T1.DEPT_CODE  =  T3.DEPT_CODE JOIN CLASS AS T4 ON T1.PROF_NUM  =  T4.PROF_NUM WHERE T3.DEPT_NAME  =  "history"
SELECT T1.EMP_FNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM JOIN CLASS AS T3 ON T1.EMP_NUM  =  T3.PROF_NUM JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE WHERE T4.CRS_CODE  =  "CIS-220" INTERSECT SELECT T1.EMP_FNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM JOIN CLASS AS T3 ON T1.EMP_NUM  =  T3.PROF_NUM JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE WHERE T4.CRS_CODE  =  "QM-261"
SELECT T2.EMP_FNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM JOIN CLASS AS T3 ON T1.EMP_NUM  =  T3.PROF_NUM JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE WHERE T4.CRS_CODE  =  "CIS-220" INTERSECT SELECT T2.EMP_FNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM JOIN CLASS AS T3 ON T1.EMP_NUM  =  T3.PROF_NUM JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE WHERE T4.CRS_CODE  =  "QM-261"
SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM  =  T2.STU_NUM JOIN CLASS AS T3 ON T2.CLASS_CODE  =  T3.CLASS_CODE JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE JOIN DEPARTMENT AS T5 ON T4.DEPT_CODE  =  T5.DEPT_CODE WHERE T5.DEPT_NAME  =  "accounting" INTERSECT SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM  =  T2.STU_NUM JOIN CLASS AS T3 ON T2.CLASS_CODE  =  T3.CLASS_CODE JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE JOIN DEPARTMENT AS T5 ON T4.DEPT_CODE  =  T5.DEPT_CODE WHERE T5.DEPT_NAME  =  "Computer Info. Systems"
SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM  =  T2.STU_NUM JOIN CLASS AS T3 ON T2.CLASS_CODE  =  T3.CLASS_CODE JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE WHERE T4.CRS_DESCRIPTION  =  "accounting" INTERSECT SELECT T1.STU_FNAME FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM  =  T2.STU_NUM JOIN CLASS AS T3 ON T2.CLASS_CODE  =  T3.CLASS_CODE JOIN COURSE AS T4 ON T3.CRS_CODE  =  T4.CRS_CODE WHERE T4.CRS_DESCRIPTION  =  "Computer Information Systems"
SELECT position FROM player WHERE Points  >  20 INTERSECT SELECT position FROM player WHERE Points  <  10
SELECT position FROM player WHERE points  >  20 INTERSECT SELECT position FROM player WHERE points  <  10
SELECT T1.Country FROM competition AS T1 JOIN competition_result AS T2 ON T1.Competition_ID  =  T2.Competition_ID JOIN club AS T3 ON T2.Club_ID_1  =  T3.Club_ID WHERE T1.Competition_type  =  "Friendly" INTERSECT SELECT T1.Country FROM competition AS T1 JOIN competition_result AS T2 ON T1.Competition_ID  =  T2.Competition_ID JOIN club AS T3 ON T2.Club_ID_1  =  T3.Club_ID WHERE T1.Competition_type  =  "Tournament"
SELECT T1.Country FROM competition AS T1 JOIN competition_result AS T2 ON T1.Competition_ID  =  T2.Competition_ID WHERE T1.Competition_type  =  "friendly" INTERSECT SELECT T1.Country FROM competition AS T1 JOIN competition_result AS T2 ON T1.Competition_ID  =  T2.Competition_ID WHERE T1.Competition_type  =  "tournament"
SELECT DISTINCT country FROM competition_result JOIN competition ON competition_result.Competition_ID  =  competition.Competition_ID WHERE competition.Competition_type  =  "Friendly" EXCEPT SELECT DISTINCT country FROM competition
SELECT DISTINCT country FROM competition_result JOIN competition ON competition_result.Competition_ID = competition.Competition_ID WHERE competition.Competition_type = "friendly" EXCEPT SELECT DISTINCT country FROM competition
SELECT T3.Name FROM manufacturer AS T3 JOIN furniture_manufacte AS T2 ON T3.Manufacturer_ID  =  T2.Manufacturer_ID JOIN furniture AS T1 ON T1.Furniture_ID  =  T2.Furniture_ID WHERE T1.Num_of_Component  <  6 INTERSECT SELECT T3.Name FROM manufacturer AS T3 JOIN furniture_manufacte AS T2 ON T3.Manufacturer_ID  =  T2.Manufacturer_ID JOIN furniture AS T1 ON T1.Furniture_ID  =  T2.Furniture_ID WHERE T1.Num_of_Component  >  10
SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "English"
SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "English"
SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name AND T1.f_id  =  T2.f_id WHERE T1.formats  =  "mp4" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000
SELECT f_id FROM files WHERE formats  =  "mp4" INTERSECT SELECT f_id FROM files WHERE resolution  <  1000
SELECT T1.f_id FROM files AS T1 WHERE T1.formats  =  "mp4" UNION SELECT T1.f_id FROM song AS T1 WHERE T1.resolution  >  720
SELECT T1.song_id FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id WHERE T2.formats  =  "mp4" UNION SELECT T1.song_id FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id WHERE T1.resolution  >  720
SELECT song_name FROM song WHERE duration  =  4 UNION SELECT song_name FROM song WHERE languages  =  "English"
SELECT song_name FROM song WHERE duration  =  4 UNION SELECT song_name FROM song WHERE languages  =  "English"
SELECT T1.song_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id WHERE T2.formats  =  "mp3" INTERSECT SELECT T1.song_name FROM song AS T1 WHERE T1.resolution  <  1000
SELECT T1.song_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id WHERE T2.formats  =  "mp3" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000
SELECT artist_name FROM artist WHERE country  =  'UK' INTERSECT SELECT artist_name FROM song WHERE languages  =  'English'
SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "English"
SELECT artist_name FROM artist JOIN song ON artist.artist_name  =  song.artist_name WHERE song.languages  =  'English' EXCEPT SELECT artist_name FROM artist JOIN song ON artist.artist_name  =  song.artist_name WHERE song.rating  >  8
SELECT artist_name FROM artist JOIN song ON artist.artist_name  =  song.artist_name WHERE song.languages  =  "English" EXCEPT SELECT artist_name FROM artist JOIN song ON artist.artist_name  =  song.artist_name WHERE song.rating  >  8
SELECT artist_name FROM artist WHERE country  =  "Bangladesh" EXCEPT SELECT artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE rating  >  7
SELECT artist_name FROM artist WHERE country  =  "Bangladesh" EXCEPT SELECT t1.artist_name FROM artist AS t1 JOIN song AS t2 ON t1.artist_name  =  t2.artist_name WHERE t2.rating  >  7